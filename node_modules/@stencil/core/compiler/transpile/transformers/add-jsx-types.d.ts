import { ModuleFiles, ComponentMeta, BuildConfig } from '../../../util/interfaces';
import * as ts from 'typescript';
export interface ImportData {
    [key: string]: Array<{
        localName: string;
        importName?: string;
    }>;
}
/**
 * Find all referenced types by a component and add them to the importDataObj and return the newly
 * updated importDataObj
 *
 * @param importDataObj key/value of type import file, each value is an array of imported types
 * @param cmpMeta the metadata for the component that is referencing the types
 * @param filePath the path of the component file
 * @param config general config that all of stencil uses
 */
export declare function updateReferenceTypeImports(importDataObj: ImportData, allTypes: {
    [key: string]: number;
}, cmpMeta: ComponentMeta, filePath: string, config: BuildConfig): ImportData;
/**
 * Generate a string based on the types that are defined within a component.
 *
 * @param cmpMeta the metadata for the component that a type definition string is generated for
 * @param importPath the path of the component file
 */
export declare function createTypesAsString(cmpMeta: ComponentMeta, importPath: string): string;
export default function addJsxTypes(moduleFiles: ModuleFiles): ts.TransformerFactory<ts.SourceFile>;
