import matchPath from '../match-path';
describe('matchPath', function () {
    describe('with path="/"', function () {
        it('returns correct url at "/"', function () {
            var path = '/';
            var pathname = '/';
            var match = matchPath(pathname, { path: path });
            expect(match.url).toBe('/');
        });
        it('returns correct url at "/somewhere/else"', function () {
            var path = '/';
            var pathname = '/somewhere/else';
            var match = matchPath(pathname, { path: path });
            expect(match.url).toBe('/');
        });
    });
    describe('with path="/somewhere"', function () {
        it('returns correct url at "/somewhere"', function () {
            var path = '/somewhere';
            var pathname = '/somewhere';
            var match = matchPath(pathname, { path: path });
            expect(match.url).toBe('/somewhere');
        });
        it('returns correct url at "/somewhere/else"', function () {
            var path = '/somewhere';
            var pathname = '/somewhere/else';
            var match = matchPath(pathname, { path: path });
            expect(match.url).toBe('/somewhere');
        });
    });
    describe('with no path', function () {
        it('matches the root URL', function () {
            var match = matchPath('/test-location/7', {});
            expect(match).toMatchObject({
                url: '/',
                path: '/',
                params: {},
                isExact: false
            });
        });
    });
    describe('cache', function () {
        it('creates a cache entry for each exact/strict pair', function () {
            // true/false and false/true will collide when adding booleans
            var trueFalse = matchPath('/one/two', { path: '/one/two/', exact: true, strict: false });
            var falseTrue = matchPath('/one/two', { path: '/one/two/', exact: false, strict: true });
            expect(!!trueFalse).toBe(true);
            expect(!!falseTrue).toBe(false);
        });
    });
});
